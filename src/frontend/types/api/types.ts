/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/events/feed/bottle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Bottle Feed Events
         * @description List bottle feed events with pagination.
         */
        get: operations["list_bottle_feed_events_events_feed_bottle_get"];
        put?: never;
        /**
         * Create Bottle Feed Event
         * @description Create a new bottle feed event.
         */
        post: operations["create_bottle_feed_event_events_feed_bottle_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/feed/bottle/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Bottle Feed Event
         * @description Retrieve a bottle feed event by its ID.
         */
        get: operations["get_bottle_feed_event_events_feed_bottle__event_id__get"];
        /**
         * Update Bottle Feed Event
         * @description Update an existing bottle feed event.
         */
        put: operations["update_bottle_feed_event_events_feed_bottle__event_id__put"];
        post?: never;
        /**
         * Delete Bottle Feed Event
         * @description Delete a bottle feed event by its ID.
         */
        delete: operations["delete_bottle_feed_event_events_feed_bottle__event_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/feed/breast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Breast Feed Events
         * @description List breast feed events with pagination.
         */
        get: operations["list_breast_feed_events_events_feed_breast_get"];
        put?: never;
        /**
         * Create Breast Feed Event
         * @description Create a new breast feed event.
         */
        post: operations["create_breast_feed_event_events_feed_breast_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/feed/breast/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Breast Feed Event
         * @description Retrieve a breast feed event by its ID.
         */
        get: operations["get_breast_feed_event_events_feed_breast__event_id__get"];
        /**
         * Update Breast Feed Event
         * @description Update an existing breast feed event.
         */
        put: operations["update_breast_feed_event_events_feed_breast__event_id__put"];
        post?: never;
        /**
         * Delete Breast Feed Event
         * @description Delete a breast feed event by its ID.
         */
        delete: operations["delete_breast_feed_event_events_feed_breast__event_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/diaper/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Diaper Events
         * @description List diaper events with pagination.
         */
        get: operations["list_diaper_events_events_diaper__get"];
        put?: never;
        /**
         * Create Diaper Event
         * @description Create a new diaper event.
         */
        post: operations["create_diaper_event_events_diaper__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/diaper/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Diaper Event
         * @description Retrieve a diaper event by its ID.
         */
        get: operations["get_diaper_event_events_diaper__event_id__get"];
        /**
         * Update Diaper Event
         * @description Update an existing diaper event.
         */
        put: operations["update_diaper_event_events_diaper__event_id__put"];
        post?: never;
        /**
         * Delete Diaper Event
         * @description Delete a diaper event by its ID.
         */
        delete: operations["delete_diaper_event_events_diaper__event_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Events
         * @description List events with pagination and time window filtering.
         */
        get: operations["list_events_events__get"];
        put?: never;
        /**
         * Create Event
         * @description Create a new event.
         */
        post: operations["create_event_events__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Event
         * @description Retrieve a event by its ID.
         */
        get: operations["get_event_events__event_id__get"];
        /**
         * Update Event
         * @description Update an existing event.
         */
        put: operations["update_event_events__event_id__put"];
        post?: never;
        /**
         * Delete Event
         * @description Delete a event by its ID.
         */
        delete: operations["delete_event_events__event_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * BreastSide
         * @description Enum for breast feeding side.
         * @enum {string}
         */
        BreastSide: "left" | "right" | "both";
        /**
         * DiaperContentsColor
         * @description Colors of diaper poop.
         * @enum {string}
         */
        DiaperContentsColor: "yellow" | "brown" | "green" | "black";
        /**
         * DiaperContentsConsistency
         * @description Consistency of diaper poop.
         * @enum {string}
         */
        DiaperContentsConsistency: "watery" | "pasty";
        /**
         * DiaperContentsSize
         * @description Size of diaper poop.
         * @enum {string}
         */
        DiaperContentsSize: "small" | "medium" | "large";
        /**
         * DiaperEvent
         * @description Event for diaper changes.
         */
        DiaperEvent: {
            /** Id */
            id: string;
            /** @default diaper_change */
            name: components["schemas"]["EventType"];
            /**
             * Description
             * @default Diaper change event
             */
            description: string;
            /**
             * Time Start
             * Format: date-time
             */
            time_start: string;
            /** Time End */
            time_end?: string | null;
            /** Notes */
            notes?: string | null;
            diaper_type: components["schemas"]["DiaperType"];
            diaper_contents_color?: components["schemas"]["DiaperContentsColor"] | null;
            diaper_contents_consistency?: components["schemas"]["DiaperContentsConsistency"] | null;
            diaper_contents_size?: components["schemas"]["DiaperContentsSize"] | null;
        };
        /**
         * DiaperType
         * @description Types of diaper changes.
         * @enum {string}
         */
        DiaperType: "pee" | "poop" | "both";
        /**
         * Event
         * @description Base event with shared fields between all baby events.
         */
        Event: {
            /** Id */
            id: string;
            name: components["schemas"]["EventType"];
            /** Description */
            description: string;
            /**
             * Time Start
             * Format: date-time
             */
            time_start: string;
            /** Time End */
            time_end?: string | null;
            /** Notes */
            notes?: string | null;
        };
        /**
         * EventListResponse
         * @description Response model for a list of events with total count.
         */
        EventListResponse: {
            /** Total */
            total: number;
            /** Events */
            events: components["schemas"]["EventWithMetadataResponse"][];
        };
        /**
         * EventType
         * @description Enum for event types.
         * @enum {string}
         */
        EventType: "feed_bottle" | "feed_breast" | "diaper_change";
        /**
         * EventWithMetadataResponse
         * @description Pydantic model for API responses
         */
        EventWithMetadataResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /**
             * Time Start
             * Format: date-time
             */
            time_start: string;
            /** Time End */
            time_end?: string | null;
            /** Notes */
            notes?: string | null;
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * FeedBottleEvent
         * @description Event for bottle feeding.
         */
        FeedBottleEvent: {
            /** Id */
            id: string;
            /** @default feed_bottle */
            name: components["schemas"]["EventType"];
            /**
             * Description
             * @default Bottle feeding event
             */
            description: string;
            /**
             * Time Start
             * Format: date-time
             */
            time_start: string;
            /** Time End */
            time_end?: string | null;
            /** Notes */
            notes?: string | null;
            /** Amount Ml */
            amount_ml: number;
            /** Is Formula */
            is_formula: boolean;
        };
        /**
         * FeedBreastEvent
         * @description Event for breastfeeding.
         */
        FeedBreastEvent: {
            /** Id */
            id: string;
            /** @default feed_breast */
            name: components["schemas"]["EventType"];
            /**
             * Description
             * @default Breastfeeding event
             */
            description: string;
            /**
             * Time Start
             * Format: date-time
             */
            time_start: string;
            /** Time End */
            time_end?: string | null;
            /** Notes */
            notes?: string | null;
            /** @default both */
            side: components["schemas"]["BreastSide"];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_bottle_feed_events_events_feed_bottle_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedBottleEvent"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_bottle_feed_event_events_feed_bottle_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FeedBottleEvent"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedBottleEvent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_bottle_feed_event_events_feed_bottle__event_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedBottleEvent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_bottle_feed_event_events_feed_bottle__event_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FeedBottleEvent"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedBottleEvent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_bottle_feed_event_events_feed_bottle__event_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_breast_feed_events_events_feed_breast_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedBreastEvent"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_breast_feed_event_events_feed_breast_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FeedBreastEvent"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedBreastEvent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_breast_feed_event_events_feed_breast__event_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedBreastEvent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_breast_feed_event_events_feed_breast__event_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FeedBreastEvent"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedBreastEvent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_breast_feed_event_events_feed_breast__event_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_diaper_events_events_diaper__get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiaperEvent"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_diaper_event_events_diaper__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DiaperEvent"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiaperEvent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_diaper_event_events_diaper__event_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiaperEvent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_diaper_event_events_diaper__event_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DiaperEvent"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiaperEvent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_diaper_event_events_diaper__event_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_events_events__get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                /** @description ISO 8601 format e.g. 2023-01-01T12:00:00Z */
                start_time?: string;
                /** @description ISO 8601 format e.g. 2023-01-01T12:00:00Z */
                end_time?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_event_events__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Event"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_event_events__event_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_event_events__event_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Event"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_event_events__event_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
